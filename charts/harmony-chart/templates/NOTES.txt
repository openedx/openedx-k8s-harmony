
Your harmony cluster is now ready to use!

An NGINX load balancer routes all HTTP/HTTPS traffic into the cluster to each
Open edX instance. Even before you deploy any Open edX instances, you can test
that the load balancer is working. First, get its external IP using

    kubectl get svc -n {{ .Release.Namespace }} harmony-ingress-nginx-controller

Next, go to http://{{ .Values.clusterDomain }}/cluster-echo-test and make sure you get
a JSON response.

{{ if and .Values.prometheusstack.grafana.enabled .Values.prometheusstack.grafana.ingress.enabled }}
Grafana shipped with the default admin user password as a bug prevents
changing it. Since is enabled on the cluster and exposed to the internet.
Please make sure you update the default admin user password!
{{ end }}
{{- if .Values.k8sdashboard.enabled }}
You have enabled the Kubernetes dashboard. For security purposes, it is not
exposed to the internet as is, however, by adjusting the settings, you could
expose it.

To connect to the dashboard, start port-forwarding with the following command:

    kubectl -n harmony port-forward svc/harmony-nginx-controller 8443:443

Now you can connect to https://localhost:8443. The certificate is self-signed by
the cluster.
{{- end }}

{{- if .Values.openfaas.enabled }}
OpenFAAS is enabled. The default admin user password is automatically generated
for you by default, and available a secret, called "basic-auth". You can
retrieve the password by using

    kubectl -n {{ .Release.Namespace }} get secret --template='{{"{{"}}index .data "basic-auth-password"{{"}}"}}' basic-auth
{{- end }}

{{- /*

Examples of more stuff that can be in a NOTES file:

{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "harmony-chart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "harmony-chart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "harmony-chart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "harmony-chart.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
*/}}
